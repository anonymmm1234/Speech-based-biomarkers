{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5f48e126",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting shap\n",
      "  Downloading shap-0.42.1-cp310-cp310-win_amd64.whl (462 kB)\n",
      "     -------------------------------------- 462.3/462.3 kB 4.1 MB/s eta 0:00:00\n",
      "Requirement already satisfied: scipy in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from shap) (1.9.1)\n",
      "Collecting cloudpickle\n",
      "  Downloading cloudpickle-2.2.1-py3-none-any.whl (25 kB)\n",
      "Requirement already satisfied: scikit-learn in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from shap) (1.1.2)\n",
      "Requirement already satisfied: numba in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from shap) (0.56.2)\n",
      "Requirement already satisfied: numpy in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from shap) (1.23.3)\n",
      "Collecting tqdm>=4.27.0\n",
      "  Downloading tqdm-4.66.1-py3-none-any.whl (78 kB)\n",
      "     ---------------------------------------- 78.3/78.3 kB ? eta 0:00:00\n",
      "Requirement already satisfied: packaging>20.9 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from shap) (21.3)\n",
      "Requirement already satisfied: pandas in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from shap) (1.5.1)\n",
      "Collecting slicer==0.0.7\n",
      "  Downloading slicer-0.0.7-py3-none-any.whl (14 kB)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from packaging>20.9->shap) (3.0.9)\n",
      "Requirement already satisfied: colorama in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from tqdm>=4.27.0->shap) (0.4.5)\n",
      "Requirement already satisfied: setuptools<60 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from numba->shap) (59.8.0)\n",
      "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from numba->shap) (0.39.1)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas->shap) (2022.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from pandas->shap) (2.8.2)\n",
      "Requirement already satisfied: joblib>=1.0.0 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from scikit-learn->shap) (1.2.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from scikit-learn->shap) (3.1.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\mezba\\appdata\\local\\programs\\python\\python310\\lib\\site-packages (from python-dateutil>=2.8.1->pandas->shap) (1.16.0)\n",
      "Installing collected packages: tqdm, slicer, cloudpickle, shap\n",
      "Successfully installed cloudpickle-2.2.1 shap-0.42.1 slicer-0.0.7 tqdm-4.66.1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 23.0.1 -> 23.2.1\n",
      "[notice] To update, run: python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "566d4ab8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt # for plotting different graph\n",
    "#from google.colab import drive # For drive access from Coolab\n",
    "import seaborn as sns # for violin graph\n",
    "\n",
    "import xgboost as xgb #for xgboost classifier\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, cross_validate\n",
    "import matplotlib.pylab as pl\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sklearn.metrics as metrics\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "import xgboost\n",
    "import shap\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "\n",
    "import pandas as pd\n",
    "import pickle\n",
    "from tqdm import tqdm\n",
    "\n",
    "\n",
    "import statistics \n",
    "import math\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# print the JS visualization code to the notebook\n",
    "#shap.initjs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "05b744d7",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (3911284809.py, line 17)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn [7], line 17\u001b[1;36m\u001b[0m\n\u001b[1;33m    df_ND_PaTaKa = df_ND_PaTaKa[p_val_satisfied_list]\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "ND_PaTaKa_data = 'features_for_ND_T5_Pataka.csv'\n",
    "Conc_PaTaKa_data = 'features_for_Concussion_T5_Pataka.csv'\n",
    "HC_PaTaKa_data = 'features_for_TWC_Healthy_T5_Pataka.csv'\n",
    "df_ND_PaTaKa = pd.read_csv(ND_PaTaKa_data)\n",
    "df_Conc_PaTaKa = pd.read_csv(Conc_PaTaKa_data)\n",
    "df_HC_PaTaKa = pd.read_csv(HC_PaTaKa_data)\n",
    "\n",
    "column_to_drop = 'apq11Shimmer'\n",
    "df_ND_PaTaKa = df_ND_PaTaKa.drop(column_to_drop, axis=1)\n",
    "df_Conc_PaTaKa = df_Conc_PaTaKa.drop(column_to_drop, axis=1)\n",
    "df_HC_PaTaKa = df_HC_PaTaKa.drop(column_to_drop, axis=1)\n",
    "\n",
    "#choosen_feature_list = ['ID_audio','spectral_bandwidth', 'mfcc', 'duration', 'ppq5Jitter', 'ddaShimmer']\n",
    "p_val_satisfied_list = ['ID_audio','spectral_bandwidth','mfcc','zero_crossing_rate','spectral_flatness','duration','AvgPower','spectral_centroid','melspectrogram','spectral_rolloff','poly_features','f2_median','f2_mean','chroma_cens','stdevF0Hz','spectral_contrast','ppq5Jitter','chroma_stft','chroma_cqt','ddaShimmer','apq3Shimmer','meanF0Hz','localdbShimmer','HNR','ddpJitter','rapJitter','apq5Shimmer','f3_median']\n",
    "\n",
    "choosen_feature_list = ['ID_audio','spectral_bandwidth', 'mfcc', 'duration', 'zero_crossing_rate', 'spectral_flatness']\n",
    "\n",
    "df_ND_PaTaKa = df_ND_PaTaKa[p_val_satisfied_list]\n",
    "df_Conc_PaTaKa = df_Conc_PaTaKa[p_val_satisfied_list]\n",
    "df_HC_PaTaKa = df_HC_PaTaKa[p_val_satisfied_list]\n",
    "\n",
    "\n",
    "df_ND_PaTaKa = df_ND_PaTaKa.dropna()\n",
    "df_Conc_PaTaKa = df_Conc_PaTaKa.dropna()\n",
    "df_HC_PaTaKa = df_HC_PaTaKa.dropna()\n",
    "\n",
    "\n",
    "####################### Datashape description Pataka\n",
    "#print(df_ND_PaTaKa.shape) #(34, 38)\n",
    "#print(df_ND_PaTaKa.dropna().shape) #(34, 38)\n",
    "\n",
    "#print(df_Conc_PaTaKa.shape) #(95, 38)\n",
    "#print(df_Conc_PaTaKa.dropna().shape) #(93, 38)\n",
    "\n",
    "#print(df_HC_PaTaKa.shape) #(94, 38)\n",
    "#print(df_HC_PaTaKa.dropna().shape) #(93, 38)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "757ea247",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(34, 38)\n",
      "(34, 38)\n",
      "(95, 38)\n",
      "(93, 38)\n",
      "(94, 38)\n",
      "(93, 38)\n"
     ]
    }
   ],
   "source": [
    "####################### Datashape description SV\n",
    "print(df_ND_PaTaKa.shape) #(36, 39)\n",
    "print(df_ND_PaTaKa.dropna().shape) #(36, 39)\n",
    "\n",
    "print(df_Conc_PaTaKa.shape) #(91, 39)\n",
    "print(df_Conc_PaTaKa.dropna().shape) #(91, 39)\n",
    "\n",
    "print(df_HC_PaTaKa.shape) #(104, 39)\n",
    "print(df_HC_PaTaKa.dropna().shape) #(104, 39)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "afbd3039",
   "metadata": {},
   "outputs": [],
   "source": [
    "################### Observation\n",
    "#In ND, We have found that the feature 'apq11Shimmer' produces nan values in 4 samples: 16,19,2,24\n",
    "#In Concussed we have found that the feature 'apq11Shimmer' produces nan values in 35 samples\n",
    "#In HC we have found that the feature 'apq11Shimmer' produces nan values in 38 samples\n",
    "\n",
    "\n",
    "###########. Data Procesing - Find the rows with nan values\n",
    "#df_nan = df_HC_PaTaKa[df_HC_PaTaKa.isna().any(axis=1)]\n",
    "#df_nan.head()\n",
    "#columns_with_nan = df_nan.columns[df_nan.isna().any()]\n",
    "#columns_with_nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ade757c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# from scipy.stats import f_oneway\n",
    "# dict_p_value = {}\n",
    "# for column in df_ND_PaTaKa.columns[2:]:\n",
    "#     anova_result = f_oneway(df_ND_PaTaKa[column], df_Conc_PaTaKa[column],df_HC_PaTaKa[column])\n",
    "#     dict_p_value[column] = anova_result.pvalue\n",
    "\n",
    "# # Perform ANOVA test\n",
    "# anova_result = f_oneway(df_ND_PaTaKa['duration'], df_Conc_PaTaKa['duration'],df_HC_PaTaKa['duration'])\n",
    "\n",
    "# # Print ANOVA results\n",
    "# print(\"ANOVA Results:\")\n",
    "# print(\"F-statistic:\", anova_result.statistic)\n",
    "# print(\"P-value:\", anova_result.pvalue)\n",
    "# #df = pd.DataFrame(dict_p_value,columns=['Feature','p_value'])\n",
    "# print('Before sorting:')\n",
    "# #print(df)\n",
    "# #sorted_df = df.sort_values(by='p_value')\n",
    "# print('After sorting:')\n",
    "# sorted_dict_p_value = sorted(dict_p_value.items())\n",
    "# #print(sorted_dict_p_value)\n",
    "# dict_p_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2107ba0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df = pd.DataFrame(sorted_dict_p_value)\n",
    "# df_cleaned = df.dropna()\n",
    "# df_cleaned.to_csv('results/annova_result_SV.csv')\n",
    "# df_cleaned = df.sort_values(by=1)\n",
    "# df_cleaned.to_csv('results/annova_result_SV_sorted.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "814c3214",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(220, 29)\n",
      "(220, 29)\n"
     ]
    }
   ],
   "source": [
    "#### CC - 0, HC - 1, ND - 2\n",
    "df_ND_PaTaKa['label'] = 2\n",
    "df_Conc_PaTaKa['label'] = 0\n",
    "df_HC_PaTaKa['label'] = 1\n",
    "df_marge_HC_ND_CC = pd.concat([df_ND_PaTaKa,df_Conc_PaTaKa,df_HC_PaTaKa],ignore_index=True)\n",
    "print(df_marge_HC_ND_CC.shape)\n",
    "df_marge_HC_ND_CC = df_marge_HC_ND_CC.dropna()\n",
    "print(df_marge_HC_ND_CC.shape)\n",
    "X = df_marge_HC_ND_CC.iloc[:,1:-1]  # all rows, all the features and no labels\n",
    "y = df_marge_HC_ND_CC.iloc[:, -1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8ac72eae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(44,)\n"
     ]
    }
   ],
   "source": [
    "#Normalization\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "# Create a MinMaxScaler object\n",
    "scaler = MinMaxScaler()\n",
    "# Normalize the DataFrame using Min-Max scaling\n",
    "X_norm = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\n",
    "# Split the dataset into training and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.2, random_state=42,stratify=y)\n",
    "print(y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "07fbd94b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[23:42:13] WARNING: /Users/runner/work/xgboost/xgboost/python-package/build/temp.macosx-10.9-x86_64-cpython-38/xgboost/src/learner.cc:767: \n",
      "Parameters: { \"scale_pos_weight\" } are not used.\n",
      "\n",
      "Accuracy of Model:: 0.9545454545454546\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.89      0.94        19\n",
      "           1       0.90      1.00      0.95        18\n",
      "           2       1.00      1.00      1.00         7\n",
      "\n",
      "    accuracy                           0.95        44\n",
      "   macro avg       0.97      0.96      0.96        44\n",
      "weighted avg       0.96      0.95      0.95        44\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x145c66e60>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# xgboost definition\n",
    "xgbc = xgb.XGBClassifier(learning_rate=0.5,\n",
    "                    n_estimators=150,\n",
    "                    max_depth=6,\n",
    "                    min_child_weight=0,\n",
    "                    gamma=0,\n",
    "                    reg_lambda=1,\n",
    "                    subsample=1,\n",
    "                    colsample_bytree=0.75,\n",
    "                    scale_pos_weight=1,\n",
    "                    objective='multi:softprob',\n",
    "                    num_class=3,\n",
    "                    random_state=10)\n",
    "#fitting model\n",
    "mcl = xgbc.fit(X_train, y_train, eval_metric='mlogloss')\n",
    "# prediction output\n",
    "y_pred = mcl.predict(X_test)\n",
    "# probability of predicted output\n",
    "proba = mcl.predict_proba(X_test)\n",
    "\n",
    "from sklearn.metrics import auc, accuracy_score\n",
    "print(\"Accuracy of Model::\",accuracy_score(y_test,y_pred))\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix,ConfusionMatrixDisplay\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(classification_report(y_test,y_pred))\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=['CC','HC','ND'])\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "33190eac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Kernel:  linear\n",
      "Best Hyperparameters:  {'C': 10, 'gamma': 0.1, 'kernel': 'linear'}\n",
      "Best Score:  0.8919047619047618\n",
      "Accuracy on Test Set:  0.9318181818181818\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.95      0.92        19\n",
      "           1       0.94      0.89      0.91        18\n",
      "           2       1.00      1.00      1.00         7\n",
      "\n",
      "    accuracy                           0.93        44\n",
      "   macro avg       0.95      0.95      0.95        44\n",
      "weighted avg       0.93      0.93      0.93        44\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x145ddb9a0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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d++urKwspaamatasWZfdrlatWqpatapiY2PVtGlT9enTR+3atdOjjz6qjRs3lmPEqAio+P3AiRMntHr1ag0bNswp6V9StWpVffTRRzp+/LjGjRtneYyqVauWcZQoT4sWLVJiYqJT0r/EMIxyudc53BccHKzp06frpZde0sGDB0u8X1hYmIYMGaIvvvhCR48eLcMIURGR+P1AVlaWTNNUs2bNLrvNrl27JOmK26DiWLVqlSIiIpxaz549He/v2rVLiYmJXowQnnL77berbdu2mjhxokv7Xfq3vm/fvjKIChUZid8PlOTmi9yg0b8kJSUpPT3dqb322muO9/m+/cvMmTP11ltvKSMjo8T7XPo7EEiPIEfJkPj9QJMmTWQYhnbs2HHZbZo2bSpJV9wGFUd4eLgSEhKcWt26dR3vN23alO/aj3Tp0kXJycmaMGFCife59EtCw4YNyygqVFQkfj8QExOj5ORkzZ07V3l5ecXeP3XqlHr06KEaNWpcdoEQi/v8y3333aedO3dq+fLlxd4zTVOnT5/2QlRwx4wZM7Ry5Up9+eWXv7vtuXPntGDBAnXp0kU1a9Ysh+hQkZD4/cTcuXNVVFSk6667Tu+//7527dqljIwMzZkzR506dVJ4eLhee+01ffjhh+rdu7c++eQT7du3T5s3b9a4ceM0ZMgQb38EeNDdd9+te+65R3379tX06dO1efNm7d+/X6tWrVL37t31+eefeztEuKh169bq16+f5syZU+y9o0eP6siRI9q1a5eWLFmiG2+8UcePH9e8efO8ECl8HZfz+YnGjRtr69atmjZtmp544gkdPnxYNWvWVPv27R3/+Pv06aNNmzYpNTVV9913n3JychQfH68//vGPevbZZ738CeBJhmFo8eLFWrBggd544w1NmzZNISEhatKkiR588EElJyd7O0SUwpQpU/Tuu+8W609MTJRhGIqIiFDjxo3Vo0cPjR49WrGxsV6IEr6Ox/ICABBAGOoHACCAkPgBAAggJH4AAAIIiR8AgABC4gcAIICQ+AEACCAkfgAAAgiJHyhnAwYM0G233eZ43a1bN40cObLc41i7dq0Mw7ji7ZoNw1BaWlqJjzlp0iS1bdvWrbj27dsnwzCUnp7u1nEAWCPxA7qYjA3DkGEYqly5shISEjRlyhQVFhaW+bk/+OADTZ06tUTbliRZA8CVcMte4Gc333yz3nzzTeXn5+tf//qXhg0bpkqVKlk+Ee3ChQuqXLmyR84bExPjkeMAQElQ8QM/s9lsio2NVYMGDfToo4+qe/fuWrFihaRfhuenTZumuLg4JSYmSpKys7N19913q2rVqoqJiVGfPn20b98+xzGLioo0evRoVa1aVdWrV9e4ceP027tk/3aoPz8/X+PHj1d8fLxsNpsSEhL0+uuva9++fUpKSpIkVatWTYZhaMCAAZIku92u1NRUNWrUSGFhYWrTpo3ee+89p/P861//UtOmTRUWFqakpCSnOEtq/Pjxatq0qapUqaLGjRsrJSVFBQUFxbZ75ZVXFB8frypVqujuu+8u9jTA1157Tc2bN1doaKiaNWumv//97y7HAqB0SPzAZYSFhenChQuO159++qkyMzO1Zs0arVq1SgUFBUpOTlZkZKQ2bNigL774QhEREbr55psd+/3tb3/TwoUL9cYbb2jjxo06ceKEli1bdsXzPvjgg/rnP/+pOXPmKCMjQ6+88ooiIiIUHx+v999/X5KUmZmpw4cP68UXX5Qkpaam6u2339b8+fP1/fffa9SoUbr//vu1bt06SRd/QbnjjjvUq1cvpaen6+GHH9aTTz7p8v+TyMhILVy4UD/88INefPFFvfrqq3rhhRectsnKytLSpUu1cuVKrV69Wtu2bdPQoUMd7y9atEjPPPOMpk2bpoyMDE2fPl0pKSl66623XI4HQCmYAMz+/fubffr0MU3TNO12u7lmzRrTZrOZY8aMcbxfu3ZtMz8/37HPP/7xDzMxMdG02+2Ovvz8fDMsLMz86KOPTNM0zTp16pizZs1yvF9QUGDWq1fPcS7TNM2uXbuajz/+uGmappmZmWlKMtesWWMZ5+eff25KMk+ePOnoO3/+vFmlShVz06ZNTts+9NBDZt++fU3TNM0JEyaYLVq0cHp//PjxxY71W5LMZcuWXfb95557zmzfvr3j9cSJE83g4GDz4MGDjr5///vfZlBQkHn48GHTNE3zqquuMhcvXux0nKlTp5qdOnUyTdM09+7da0oyt23bdtnzAig95viBn61atUoREREqKCiQ3W7Xfffdp0mTJjneb926tdO8/nfffaesrCxFRkY6Hef8+fPavXu3Tp8+rcOHD6tjx46O90JCQtShQ4diw/2XpKenKzg4WF27di1x3FlZWTp79qxuuukmp/4LFy6oXbt2kqSMjAynOCSpU6dOJT7HJe+++67mzJmj3bt3Kzc3V4WFhYqKinLapn79+qpbt67Teex2uzIzMxUZGandu3froYce0uDBgx3bFBYWKjo62uV4ALiOxA/8LCkpSfPmzVPlypUVFxenkBDnfx7h4eFOr3Nzc9W+fXstWrSo2LFq1qxZqhjCwsJc3ic3N1eS9OGHHzolXOniugVP+fLLL9WvXz9NnjxZycnJio6O1pIlS/S3v/3N5VhfffXVYr+IBAcHeyxWAJdH4gd+Fh4eroSEhBJvf8011+jdd99VrVq1ilW9l9SpU0dff/21unTpIuliZbtlyxZdc801ltu3bt1adrtd69atU/fu3Yu9f2nEoaioyNHXokUL2Ww2HThw4LIjBc2bN3csVLzkq6+++v0P+SubNm1SgwYN9NRTTzn69u/fX2y7AwcO6NChQ4qLi3OcJygoSImJiapdu7bi4uK0Z88e9evXz6XzA/AMFvcBpdSvXz/VqFFDffr00YYNG7R3716tXbtWI0aM0MGDByVJjz/+uGbMmKG0tDTt2LFDQ4cOveI1+A0bNlT//v01aNAgpaWlOY65dOlSSVKDBg1kGIZWrVqlY8eOKTc3V5GRkRozZoxGjRqlt956S7t379bWrVv10ksvORbMDRkyRLt27dLYsWOVmZmpxYsXa+HChS593iZNmujAgQNasmSJdu/erTlz5lguVAwNDVX//v313XffacOGDRoxYoTuvvtuxcbGSpImT56s1NRUzZkzRzt37tT27dv15ptv6vnnn3cpHgClQ+IHSqlKlSpav3696tevrzvuuEPNmzfXQw89pPPnzztGAJ544gk98MAD6t+/vzp16qTIyEjdfvvtVzzuvHnzdOedd2ro0KFq1qyZBg8erLy8PElS3bp1NXnyZD355JOqXbu2HnvsMUnS1KlTlZKSotTUVDVv3lw333yzPvzwQzVq1EjSxXn3999/X2lpaWrTpo3mz5+v6dOnu/R5e/furVGjRumxxx5T27ZttWnTJqWkpBTbLiEhQXfccYduueUW9ejRQ1dffbXT5XoPP/ywXnvtNb355ptq3bq1unbtqoULFzpiBVC2DPNyq4wAAIDfoeIHACCAkPgBAAggJH4AAAIIiR8AgABC4gcAIICQ+AEACCAkfgAAAgiJHwCAAELiBwAggJD4AQAIICR+AAACCIkfAIAA8v8DPVhCI6zR/lkAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Info_list = []\n",
    "######################################################\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "#Support Vector Machine\n",
    "\n",
    "from sklearn import svm\n",
    "# Define the hyperparameters to tune and their possible values\n",
    "parameters = {'kernel': ['linear', 'rbf', 'poly', 'sigmoid'], 'C': [0.1, 1, 10], 'gamma': [0.1, 1, 10]}\n",
    "\n",
    "# Create an SVM classifier\n",
    "svm_classifier = svm.SVC()\n",
    "\n",
    "# Perform grid search with cross-validation\n",
    "grid_search = GridSearchCV(svm_classifier, parameters, cv=5)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Print the best kernel and hyperparameters\n",
    "print(\"Best Kernel: \", grid_search.best_params_['kernel'])\n",
    "print(\"Best Hyperparameters: \", grid_search.best_params_)\n",
    "print(\"Best Score: \", grid_search.best_score_)\n",
    "\n",
    "Info_list.append([\"Support Vector Machine\",grid_search.best_params_,grid_search.best_score_])\n",
    "\n",
    "# Evaluate the model with the best hyperparameters on the test set\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred = best_model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy on Test Set: \", accuracy)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(classification_report(y_test,y_pred))\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=['CC','HC','ND'])\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5295042c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Hyperparameters:  {'criterion': 'gini', 'max_depth': 5, 'min_samples_leaf': 1, 'min_samples_split': 2}\n",
      "Best Score:  0.9657142857142856\n",
      "Accuracy on Test Set:  0.9318181818181818\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.89      0.92        19\n",
      "           1       0.89      0.94      0.92        18\n",
      "           2       1.00      1.00      1.00         7\n",
      "\n",
      "    accuracy                           0.93        44\n",
      "   macro avg       0.95      0.95      0.95        44\n",
      "weighted avg       0.93      0.93      0.93        44\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x146154910>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Create a decision tree classifier\n",
    "dt_classifier = DecisionTreeClassifier()\n",
    "\n",
    "# Define the hyperparameters to tune and their possible values\n",
    "parameters = {\n",
    "    'criterion': ['gini', 'entropy'],\n",
    "    'max_depth': [None, 5, 10, 15],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Perform grid search with cross-validation\n",
    "grid_search = GridSearchCV(dt_classifier, parameters, cv=5)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Print the best hyperparameters and the corresponding score\n",
    "print(\"Best Hyperparameters: \", grid_search.best_params_)\n",
    "print(\"Best Score: \", grid_search.best_score_)\n",
    "\n",
    "Info_list.append([\"DecisionTree\",grid_search.best_params_,grid_search.best_score_])\n",
    "\n",
    "# Evaluate the model with the best hyperparameters on the test set\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred = best_model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy on Test Set: \", accuracy)\n",
    "print(classification_report(y_test,y_pred))\n",
    "\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=['CC','HC','ND'])\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2fa9aaf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Hyperparameters:  {'max_depth': None, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n",
      "Best Score:  0.9771428571428572\n",
      "Accuracy on Test Set:  0.9090909090909091\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.89      0.89        19\n",
      "           1       0.89      0.89      0.89        18\n",
      "           2       1.00      1.00      1.00         7\n",
      "\n",
      "    accuracy                           0.91        44\n",
      "   macro avg       0.93      0.93      0.93        44\n",
      "weighted avg       0.91      0.91      0.91        44\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x145e8f850>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "########################################\n",
    "#Random Forest\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf_classifier = RandomForestClassifier()\n",
    "\n",
    "# Define the hyperparameters to tune and their possible values\n",
    "parameters = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_features': ['sqrt', 'log2'],\n",
    "    'max_depth': [None, 5, 10, 15],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Perform grid search with cross-validation\n",
    "grid_search = GridSearchCV(rf_classifier, parameters, cv=5)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Print the best hyperparameters and the corresponding score\n",
    "print(\"Best Hyperparameters: \", grid_search.best_params_)\n",
    "print(\"Best Score: \", grid_search.best_score_)\n",
    "\n",
    "# Evaluate the model with the best hyperparameters on the test set\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred = best_model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy on Test Set: \", accuracy)\n",
    "\n",
    "Info_list.append([\"RandomForest\",grid_search.best_params_,grid_search.best_score_])\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix,ConfusionMatrixDisplay\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "print(classification_report(y_test,y_pred))\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=['CC','HC','ND'])\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebdad997",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
